#pragma config(Sensor, in1,    GYRO,           sensorGyro)
#pragma config(Sensor, in2,    Pexpander,      sensorAnalog)
#pragma config(Sensor, in3,    ,               sensorAnalog)
#pragma config(Sensor, in4,    ,               sensorAnalog)
#pragma config(Sensor, dgtl6,  ,               sensorTouch)
#pragma config(Sensor, dgtl7,  arms_sensor,    sensorQuadEncoder)
#pragma config(Sensor, dgtl9,  left_sensor,    sensorQuadEncoder)
#pragma config(Sensor, dgtl11, right_sensor,   sensorQuadEncoder)
#pragma config(Motor,  port1,           L_one,         tmotorVex393HighSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           DR1,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           L_two,         tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           L_Y,           tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           Claw1,         tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           Claw2,         tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           R_Y,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           R_two,         tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           DL1,           tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          R_one,         tmotorVex393HighSpeed_HBridge, openLoop)
#pragma platform(VEX2)
#pragma competitionControl(Competition)
#include "Vex_Competition_Includes.c"

//controls

/*
channel 1 and channel 2 - drive
channel 3 - arms
channel 4 - manual claw
button 7U - (hold) enable manual claw
button 6U - claw close
button 6D - claw extra hold
button 5U - claw open



*/

//global integers

int claw = SensorValue[in3];
int x_axis, y_axis;
float a_value = 0.000062;
int lift;
int claw_l, claw_r;
int claw_d_l;
int claw_d_r;
int claw1_power;
int claw2_power;
int claw_r_i;
int claw_l_i;

task driving()
{
	while(true)
	{
		x_axis = (a_value * (vexRT[Ch1]* vexRT[Ch1]* vexRT[Ch1]));
		y_axis = (a_value * (vexRT[Ch2]* vexRT[Ch2]* vexRT[Ch2]));
		lift = vexRT[Ch3];

		motor[DL1] = (y_axis - x_axis);
		motor[DR1] = (y_axis + x_axis);
		motor[L_one] = lift;
		motor[L_two] = lift;
		motor[L_Y] = lift;
		motor[R_one] = lift;
		motor[R_two] = lift;
		motor[R_Y] = lift;
	}
}

task claw_d()
{
	claw_r = SensorValue[in4] + 0;
	claw_l = SensorValue[in3] + 60;
	int claw_r_save;
	int claw_l_save;
	while(true)
	{
		claw_r_save = claw_r;
		claw_l_save = claw_l;
		wait1Msec(100);
		claw_d_r = claw_r - claw_r_save;
		claw_d_l = claw_l - claw_l_save;
	}
}

task claw_()
{
	startTask(claw_d);
	//startTask(claw_i);

	claw_r = SensorValue[in4] + 0;
	claw_l = SensorValue[in3] + 60;

	while(true)
	{


		if(vexRT[Btn5U] == 1)
		{
			claw = 1600;
		}
		if(vexRT[Btn6U] == 1)
		{
			claw = 2520;
		}



		if(vexRT[Btn7U] == 0 && vexRT[Btn6D] == 0)
		{
			motor[Claw1] = (claw - claw_r)*0.2 + /*claw_r_i*0.000*/ - claw_d_r*0.04;
			motor[Claw2] = (claw - claw_l)*0.2 + /*claw_r_i*0.000*/  - claw_d_l*0.04 ;
		}
		else if(vexRT[Btn7U] == 1)
		{
			motor[Claw1] = vexRT[Ch4];
			motor[Claw2] = vexRT[Ch4];
		}
		else if(vexRT[Btn6D] == 1)
		{
			motor[Claw1] = 100;
			motor[Claw2] = 100;
		}
	}
}


void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.
	AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
	// User control code here, inside the loop

	while (true)
	{
		startTask(driving);
		startTask(claw_);
	}
}
